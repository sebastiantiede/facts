var transitionEndTrigger="transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd";$(window).ready(function(){F_Global.init(),F_UI.init(),F_Git.init(),F_Facts.init(),F_Local.init()}).scroll(function(){}).resize(function(){$(this).trigger("resize__tooltip")});
var F_Global={vars:{},init:function(){F_Global.setBaseURL()},setBaseURL:function(){F_Global.vars.baseURL=window.location.href.replace(/\/#[^#]+$/,"")},is_mobile:function(){if(null!=NSINKA_Global.vars.is_mobile)return NSINKA_Global.vars.is_mobile;var a=!1;return function(i){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od|ad)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(i)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(i.substr(0,4)))&&(a=!0)}(navigator.userAgent||navigator.vendor||window.opera),NSINKA_Global.vars.is_mobile=a,a},is_tablet:function(){var a=$(window).width(),i=$(window).height(),t=a>i?a/i:i/a;return this.is_mobile()&&t<1.6},is_smartphone:function(){var a=$(window).width(),i=$(window).height(),t=a>i?a/i:i/a;return this.is_mobile()&&t>1.6},ajaxPage:function(a,i){NSINKA_Global.vars.xhr&&NSINKA_Global.vars.xhr.abort(),NSINKA_Global.vars.xhr=$.ajax({url:a,success:function(a){$data=$.parseHTML(a).filter(function(a){return"TITLE"==a.nodeName||"MAIN"==a.nodeName?a:void 0}),title=$data.filter(function(a){return"TITLE"==a.nodeName?a:void 0}),$("title").text($(title[0]).text()),i($data)},dataType:"html"})},randomColor:function(){for(var a="#",i=0;i<6;i++)a+="0123456789ABCDEF"[Math.floor(16*Math.random())];return a},tmpl:function(a,i){return i={data:i}||{data:{}},_.template($("#tmpl_"+a).clone().text())(i)},history:{set:function(a,i){history.pushState({},a,F_Global.vars.baseURL+i)}}};
function getRandItemsOfArray(e,t){var i,s,n,a=e.length;for(n=e.length;n;n--)i=Math.floor(Math.random()*n),s=e[n-1],e[n-1]=e[i],e[i]=s;return t<a&&(e=e.splice(0,t)),e}var F_Facts={vars:{},init:function(){this.slideshow()},slideshow:function(){F_Facts.vars.$slideshow=$("#facts_slideshow"),F_Git.searchFile("facts/de_DE",function(e){F_Facts.vars.$slideshow.slick({prevArrow:'<button type="button" class="slick-prev material-icons">&#xE314;</button>',nextArrow:'<button type="button" class="slick-next material-icons">&#xE315;</button>'}),$.each(e._data,function(e,t){F_Git.file(t.html_url,function(e){$slide=$(F_Global.tmpl("factArticle",e)),$slide[0].factFile=t.html_url,$slide[0].factData=e,F_Facts.vars.$slideshow.slick("slickAdd",F_Facts.slide.init($slide,e)),$slide.find("h2,h1").click(function(){F_UI.body.tooltip.show($("h2,h1",$(this).parent()).first(),$(this).closest("article")[0].factData)})})}),F_Facts.vars.$slideshow.on("afterChange",function(){F_UI.body.updateColorSchemes(),F_Facts.vars.$slideshow.find(":not(.slick-current)").scrollTop(0);var e=F_Facts.vars.$slideshow.find(".slick-current"),t=(e[0].factData,e[0].factFile);F_Global.history.set(e.find("h1").text(),t.replace(/.*(\/[^\/]+\/[^\/]+)$/,"#!$1"))})})},slide:{init:function(e,t){var i=this;return e.scroll(function(s){e.find(".fact__relatives").offset().top-e.scrollTop()<=0&&i.references.init(e,t)}),e},references:{insertionTimeout:0,init:function(e,t){e[0].referencesInited||(e[0].referencesInited=!0,F_Git.search(t.tags.join("+"),function(t){t._data.length&&$.each(getRandItemsOfArray(t._data,3),function(t,i){F_Git.file(i.html_url,function(t){F_Facts.slide.references.reference(t,e)})})}))},reference:function(e,t){e.backgroundColor=F_UI.body.getRandColorScheme()[1];var i=$(F_Global.tmpl("factArticleRelative",e));t.find(".fact__relatives .relatives").append(i),setTimeout(function(){i.addClass("is-active")},F_Facts.slide.references.insertionTimeout),F_Facts.slide.references.insertionTimeout=F_Facts.slide.references.insertionTimeout+100}}}};
var F_Git={vars:{gitURLContent:"https://api.github.com/repos/",gitURLSearch:"https://api.github.com/search/code?q=repo:"},init:function(){F_Git.vars.gitUser="sebastiantiede",F_Git.vars.gitRepo="whatthefact",F_Git.vars.gitURLContent=F_Git.vars.gitURLContent+F_Git.vars.gitUser+"/"+F_Git.vars.gitRepo+"/contents",F_Git.vars.gitURLSearch=F_Git.vars.gitURLSearch+F_Git.vars.gitUser+"/"+F_Git.vars.gitRepo},languageSelector:function(){var t=navigator.language||navigator.userLanguage;return t+"_"+t.toUpperCase()},folder:function(t,i){$.get(F_Git.vars.gitURLContent+t,function(t){var e=F_Git,a=[];$.each(t,function(t,i){a[t]=Object.assign(i,e)}),t=Object.assign({_data:a},e),i(t)},"json")},file:function(t,i){var e=t||this.download_url,a=e.match(/([^\.]+)$/)[1]||null;$regex=new RegExp("(http(s)?://)github.com(/"+F_Git.vars.gitUser+"/"+F_Git.vars.gitRepo+")/blob","i"),e=e.replace($regex,"$1raw.githubusercontent.com$3"),$.get(e,i,a)},search:function(t,i){t=t.replace(/\s/,"+"),$.get(F_Git.vars.gitURLSearch+"+"+t,function(t){var e=F_Git,a=[];$.each(t.items,function(t,i){a[t]=Object.assign(i,e)}),t=Object.assign({_data:a},e),i(t)},"json")},searchFile:function(t,i){t=t.replace(/\s/,"+"),this.search(t+"+in:path",i)}};
var F_UI={vars:{colorSchemes:[["#505551","#a7d3af","#d0e3d4"],["#6b4c5b","#d3a7bc","#edd9e3"],["#3e4664","#a5aed1","#ccd1e3"],["#684949","#c49a9a","#dfc6c6"]]},init:function(){this.header.nav.burger(),F_UI.body.updateColorSchemes()},header:{nav:{burger:function(){$(".hamburger").click(function(o){o.preventDefault();var t=$(this),e=$("body");t.hasClass("is-active")?(e.removeClass("nav-is-open"),t.removeClass("is-active")):(e.addClass("nav-is-open"),t.addClass("is-active"))})}}},body:{updateColorSchemes:function(o){var t=(F_UI.vars.colorSchemes,F_UI.body.getRandColorScheme()),e=$("#colorScheme");$newCSS=$(F_Global.tmpl("colorSchemesCSS",{color1:t[0],color2:t[1],color3:t[2]})),e.length?e.replaceWith($newCSS):$("body").prepend($newCSS)},getRandColorScheme:function(){var o=F_UI.vars.colorSchemes;return o[Math.floor(Math.random()*o.length+1)-1]},tooltip:{$tootltip:!1,timeout:!1,show:function(o,t){F_UI.body.tooltip.$tootltip.length&&F_UI.body.tooltip.$tootltip.remove(),F_UI.body.tooltip.$tootltip=$(F_Global.tmpl("factTooltip",t)),o.closest("article").append(F_UI.body.tooltip.$tootltip),$(window).on("resize__tooltip",function(){F_UI.body.tooltip.$tootltip.css({left:o.offset().left+o.width()/2-F_UI.body.tooltip.$tootltip.width()/2,top:o.offset().top-o.height()/2})}).trigger("resize__tooltip"),o.add(F_UI.body.tooltip.$tootltip).mousemove(function(){clearTimeout(F_UI.body.tooltip.timeout)}).mouseout(function(){clearTimeout(F_UI.body.tooltip.timeout),F_UI.body.tooltip.timeout=setTimeout(function(){F_UI.body.tooltip.$tootltip.fadeOut(function(){$(this).remove()})},1e3)})}}}};
function __(_){return F_Local.__(_)}var F_Local={local:!1,init:function(){F_Local.local=F_Local[F_Git.languageSelector()]},__:function(_){}};
F_Local.de_DE=[{msgid:"Thumbnail",msgstr:""}];
F_Local.en_GB={};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
